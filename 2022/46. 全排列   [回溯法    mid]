class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        if(n == 0){
            return res;
        }
        boolean[] used = new boolean[n];
        List<Integer> path = new ArrayList<>();
        dfs(nums, n, 0, res, path, used);
        return res;
    }
    public void dfs(int[] nums, int len, int depth, List<List<Integer>> res, List<Integer> path, boolean[] used){
        if(len == depth){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i = 0; i < len; i++){
            if(!used[i]){
                path.add(nums[i]);
                used[i] = true;
                dfs(nums, len, depth + 1, res, path, used);
                used[i] = false;
                path.remove(path.size() - 1);
            }
        }
    }
}
