//优化空间复杂度的动态规划
class Solution {
   public int trap(int[] height) {
        int n = height.length;
        int left = 0;
        int right = n - 1;
        int leftMax = height[0];
        int rightMax = height[n - 1];
        int res = 0;
        while(left < right){
            if(leftMax < rightMax){
                res += Math.max(0, leftMax - height[left]);
                left++;
                leftMax = Math.max(leftMax, height[left]);
            }else{
                res += Math.max(0, rightMax - height[right]);
                right--;
                rightMax = Math.max(rightMax, height[right]);
            }
        }
        return res;   
    }
}

//动态规划
class Solution {
   public int trap(int[] height) {
        int n = height.length;

        int[] leftMax = new int[n];
        leftMax[0] = height[0];
        for(int i = 1; i < n; i++){
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }

        int[] rightMax = new int[n];
        rightMax[n - 1] = height[n - 1];
        for(int i = n - 2; i >= 0; i--){
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }

        int res = 0;
        for(int i = 0; i < n; i++){
            res += Math.min(leftMax[i], rightMax[i]) - height[i];
        }
        return res;
    }
}
