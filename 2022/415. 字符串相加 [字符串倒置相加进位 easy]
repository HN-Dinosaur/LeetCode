//官方
class Solution {
   public static String addStrings(String num1, String num2) {
        

        int i = num1.length() - 1, j = num2.length() - 1, add = 0;
        StringBuffer ans = new StringBuffer();
        while(i >= 0 || j >= 0 || add > 0){
            int x = i >= 0 ? num1.charAt(i) - '0' : 0;
            int y = j >= 0 ? num2.charAt(j) - '0' : 0;
            int result = x + y + add;
            ans.append(result % 10);
            add = result / 10;
            i--;
            j--;
        }
        return ans.reverse().toString();
    }
}
//自己
public static String addStrings(String num1, String num2) {

        String result = "";

        ArrayList<Byte> array1 = new ArrayList<>();
        ArrayList<Byte> array2 = new ArrayList<>();
        char[] charArray1 = num1.toCharArray();
        char[] charArray2 = num2.toCharArray();
        int i = 0;
        //倒置添加
        for(i = charArray1.length - 1; i >= 0; i--){
            array1.add((byte) (charArray1[i] - '0'));
        }
        for(i = charArray2.length - 1; i >= 0; i--){
            array2.add((byte) (charArray2[i] - '0'));
        }
        //相同长度
        int len1 = array1.size();
        int len2 = array2.size();
        if(len1 > len2){
            for(i = 0; i < len1 - len2; i++)
                array2.add((byte) 0);

        }else if(len1 < len2){
            for(i = 0; i < len2 - len1; i++)
                array1.add((byte) 0);
        }
        int step = 0;
        for(i = 0; i < array1.size(); i++){
            array1.set(i, (byte) (array1.get(i) + array2.get(i)));
            if(step == 1){
                array1.set(i ,(byte) (array1.get(i) + 1));
                step = 0;
            }
            if(array1.get(i) >= 10){
                step = 1;
                array1.set(i, (byte) (array1.get(i) - 10));
            }
        }
        if(step == 1)
            array1.add((byte) 1);
        for(i = array1.size() - 1; i >= 0; i--){
            result += array1.get(i);
        }
        return result;
    }
