//递归
    Map<Integer, Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        for(int i = 0; i < inorder.length; i++){
            map.put(inorder[i], i);
        }
        return build(preorder, inorder, 0, preorder.length - 1, 0, inorder.length - 1);
    }
    public TreeNode build(int[] preorder, int[] inorder, int pre_left, int pre_right, int in_left, int in_right){
        if(pre_left > pre_right || in_left > in_right){
            return null;
        }
        int pre_root_index = pre_left;
        int in_root_index = map.get(preorder[pre_root_index]);

        
        TreeNode root = new TreeNode(preorder[pre_root_index]);
        int subLeftTree = in_root_index - in_left;

        root.left = build(preorder, inorder, pre_root_index + 1, pre_root_index + subLeftTree, in_left, in_root_index - 1);
        root.right = build(preorder, inorder, pre_root_index + subLeftTree + 1, pre_right, in_root_index + 1, in_right);

        return root;

        
    }
