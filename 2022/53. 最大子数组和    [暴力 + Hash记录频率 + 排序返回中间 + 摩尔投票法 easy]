//暴力 O(n * n) 超出时间限制  不能AC
public int maxSubArray2(int[] nums) {
        int max = Integer.MIN_VALUE;
        int pre = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i; j < nums.length; j++){
                pre += nums[j];
                if(pre > max)
                    max = pre;
            }
        }
        return max;
    }
//哈希表记录次数  遍历hash表大于2/n的直接返回   11ms
  public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for(int num: nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for(int num: map.keySet()){
            if(map.get(num) > nums.length / 2){
                res = num;
            }
        }
        return res;
    }
    //排序  大于2/n次数的肯定在中间 2ms
     public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length / 2];
    }
    //候选人 1ms
    public int majorityElement(int[] nums) {
        int candidate = nums[0];
        int count = 1;
        for(int num: nums){
            if(num == candidate)
                count++;
            else if(--count == 0){
                candidate = num;
                count =1;
            }
        }
        return candidate;
    }
