/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        Map<ListNode, Integer> map = new HashMap<>();
        int i = 0;
        int pos = -1;
        ListNode temp = head;
        while(temp != null){
            map.put(temp, i++);
            temp = temp.next;
            if(temp != null && map.containsKey(temp)){
                pos = map.get(temp);
                break;
            }
        }
        if(pos == -1)
            return null;
        for(int j = 0; j < pos; j++)
            head = head.next;
        return head;
    }
}

//龟兔赛跑
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode rubbit = head;
        ListNode turple = head;
        //假设非环a,环b,rubbit走过f，turple走过s
        //f = 2s   f = s + nb
        //s = nb f = 2nb
        //环开始 = a + nb
        //所以turple再走a即到入口
        while(true){
            if(rubbit == null || rubbit.next == null)
                return null;
            rubbit = rubbit.next.next;
            turple = turple.next;
            if(rubbit == turple) break;
        }
        rubbit = head;
        while(rubbit != turple){
            rubbit = rubbit.next;
            turple = turple.next;
        }
        return rubbit;
    }
}
