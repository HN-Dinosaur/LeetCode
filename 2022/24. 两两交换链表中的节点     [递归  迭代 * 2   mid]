//迭代  反转
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null)
            return head;
        ListNode dummyNode = new ListNode(0);
        ListNode prev = dummyNode;
        dummyNode.next = head;
        while(head != null){
            ListNode tail = prev;
            for(int i = 0; i < 2; i++){
                tail = tail.next;
                if(tail == null)
                    return dummyNode.next;
            }
            ListNode next = tail.next;
            ListNode[] reverseArray = reverseNode(head, tail);
            head = reverseArray[0];
            tail = reverseArray[1];
            prev.next = head;
            tail.next = next;
            prev = tail;
            head = tail.next;
        }
        return dummyNode.next;
    }
    public ListNode[] reverseNode(ListNode head, ListNode tail){
        ListNode pre = null;
        ListNode cur = head;
        while(pre != tail){
            ListNode nextNode = cur.next;
            cur.next = pre;
            pre = cur;
            cur = nextNode;
        }
        return new ListNode[]{tail, head};
    }
}
//迭代
public ListNode swapPairs(ListNode head) {
        if(head == null)
            return head;
        ListNode dummyNode = new ListNode(0);
        dummyNode.next = head;
        ListNode prev = dummyNode;
        while(prev.next != null && prev.next.next != null){
            ListNode node1 = prev.next;
            ListNode node2 = prev.next.next;
            prev.next = node2;
            node1.next = node2.next;
            node2.next = node1;
            prev = node1;
        }
        return dummyNode.next;
    }
//递归
public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null)
            return head;
        ListNode nextNode = head.next;
        head.next = swapPairs(nextNode.next);
        nextNode.next = head;
        return nextNode;
    }
