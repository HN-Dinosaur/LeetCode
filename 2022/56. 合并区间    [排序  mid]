/*
首先，将给予的二维数组按start升序排序，添加第一个一维数组进入list，每一个一维数组同当前list最后一个array的end进行比较，如果当前start大于前一个的end，必然没用overlap的区域，如果小于，添加
上一个array的end和当前array的start的max进入即可
*/

public static int[][] merge(int[][] intervals) {
        if(intervals.length == 0){
            return new int[0][2];
        }
        Arrays.sort(intervals, new Comparator<int[]>() {
            @Override
            public int compare(int[] array1, int[] array2) {
                return array1[0] - array2[0];
            }
        });
        List<int[]> list = new ArrayList<>();
        for(int i = 0; i < intervals.length; i++){
            int start = intervals[i][0];
            int end = intervals[i][1];
            if(list.size() == 0 || list.get(list.size() - 1)[1] < start){
                list.add(new int[]{start, end});
            }else{
                list.get(list.size() - 1)[1] = Math.max(end, list.get(list.size() - 1)[1]);
            }
        }
        return list.toArray(new int[list.size()][]);
    }
