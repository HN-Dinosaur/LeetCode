  static int len1;
    static int len2;
    static int[][] b;
    static int[][] c;
    static String res = "";
    public static String longestPalindrome(String s) {
        StringBuffer temp = new StringBuffer(s);
        temp.reverse();
        String now = new String(temp);

        char[] array1 = s.toCharArray();
        char[] array2 = now.toCharArray();
        len1 = array1.length;
        len2 = array2.length;

        b = new int[len1 + 1][len2 + 1];
        c = new int[len1 + 1][len2 + 1];
        lcsLength(array1, array2);
        lcs(len1, len2, array1, b);

        return res;
    }
    public static void lcsLength(char[] x, char[] y){
        for(int i = 1; i <= len1; i++){
            for(int j = 1; j <= len2; j++){
                if(x[i - 1] == y[j - 1]){
                    b[i][j] = 1;
                    c[i][j] = c[i - 1][j - 1] + 1;
                }else if(c[i - 1][j] >= c[i][j - 1]){
                    b[i][j] = 2;
                    c[i][j] = c[i - 1][j];
                }else{
                    b[i][j] = 3;
                    c[i][j] = c[i][j - 1];
                }
            }
        }
    }
    public static void lcs(int i, int j, char[] x, int[][] b){
        if (i == 0 || j == 0) {
            return;
        }
        if(b[i][j] == 1){
            lcs(i - 1, j - 1, x, b);
            res += x[i - 1];
        }else if(b[i][j] == 2){
            lcs(i - 1, j, x ,b);
        }else{
            lcs(i, j - 1, x, b);
        }
    }
