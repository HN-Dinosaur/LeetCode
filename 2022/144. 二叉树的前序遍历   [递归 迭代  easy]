//递归
public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        preOrder(list, root);
        return list;
    }
    public List<Integer> preOrder(List<Integer> list, TreeNode root){
        if(root == null)
            return list;
        list.add(root.val);
        preOrder(list, root.left);
        preOrder(list, root.right);
        return list;
    }
//迭代
public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        while(!stack.isEmpty() || root != null){
            while(root != null){
                list.add(root.val);
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            root = root.right;
        }
        return list;
    }
