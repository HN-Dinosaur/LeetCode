//暴力  先拿到所有元素O(n)  快排O(nLogn)  链接在一起O(n)
public ListNode mergeKLists(ListNode[] lists) {
        List<Integer> list = new ArrayList<>();
        for(int i = 0; i < lists.length; i++){
            while(lists[i] != null){
                list.add(lists[i].val);
                lists[i] = lists[i].next;
            }
        }

       
        quickSort(list);
        ListNode head = new ListNode(0);
        ListNode temp = head;
        for(int i = 0; i < list.size(); i++){
            ListNode node = new ListNode(list.get(i));
            temp.next = node;
            temp = temp.next;
        }
        return head.next;
    }

    public static void quickSort(List<Integer> array){
        realQuickSort(array, 0, array.size() - 1);
    }
    public static void realQuickSort(List<Integer> array, int begin, int end){
        if(begin >= 0 && end < array.size() && begin < end){
            int pivot = array.get(begin), i = begin, j = end;
            while(i != j){
                while(i < j && array.get(j) >= pivot)
                    j--;
                if(i < j)
                    array.set(i++, array.get(j));
                while(i < j && array.get(i) <= pivot)
                    i++;
                if(i < j)
                    array.set(j--, array.get(i));
            }
            array.set(i, pivot);
            realQuickSort(array, begin, i - 1);
            realQuickSort(array, j + 1, end);
        }

    }
    //最小堆 O(kn * logn)
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head = new ListNode(0);
        ListNode tail = head;
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(Comparator.comparingInt(o -> o.val));
        for(int i = 0; i < lists.length; i++){
            if(lists[i] != null){
                minHeap.offer(lists[i]);    
            }
        }
        while(!minHeap.isEmpty()){
            tail.next = minHeap.poll();
            tail = tail.next;
            if(tail.next != null){
                minHeap.offer(tail.next);
            }
        }

        return head.next;
    }
    //patition
    public ListNode mergeKLists(ListNode[] lists) {
        return merge(lists, 0, lists.length - 1);
    }
    public ListNode merge(ListNode[] lists, int left, int right){
        if(left == right)
            return lists[left];
        else if(left > right)
            return null;
        int mid = (left + right) / 2;
        return mergeTwoNodeLink(merge(lists, left, mid), merge(lists, mid + 1, right));
        
    }
    public ListNode mergeTwoNodeLink(ListNode list1, ListNode list2){
        ListNode head = new ListNode(0);
        ListNode tail = head;
        while(list1 != null && list2 != null){
            if(list1.val < list2.val){
                tail.next = list1;
                list1 = list1.next;
            }else{
                tail.next = list2;
                list2 = list2.next;
            }
            tail = tail.next;
        }
        tail.next = list1 == null ? list2 : list1;
        return head.next;
    }
