class Solution {
   public List<Integer> majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        List<Integer> list = new ArrayList<>();
        for(int num: nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for(int num: map.keySet()){
            if(map.get(num) > nums.length / 3){
                list.add(num);
            }
        }
        return list;
    }
}
//摩尔投票法
class Solution {
   public static List<Integer> majorityElement(int[] nums) {

        List<Integer> list = new ArrayList<>();
        if(nums.length == 0 || nums == null)
            return list;
        int candidate1 = nums[0];
        int candidate2 = nums[0];
        int count1 = 0;
        int count2 = 0;

        for(int num: nums){
            if(num == candidate1)
                count1++;
            else if(num == candidate2)
                count2++;
            else if(count1 == 0){
                candidate1 = num;
                count1++;
            }
            else if(count2 == 0){
                candidate2 = num;
                count2++;
            }
            else{
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for(int num: nums){
            if(candidate1 == num)
                count1++;
            else if(candidate2 == num)
                count2++;
        }
        if(count1 > nums.length / 3) list.add(candidate1);
        if(count2 > nums.length / 3) list.add(candidate2);
        return list;
    }
}
