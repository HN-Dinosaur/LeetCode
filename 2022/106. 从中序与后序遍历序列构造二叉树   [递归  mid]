 Map<Integer, Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        for(int i = 0; i < inorder.length; i++){
            map.put(inorder[i], i);
        }
        TreeNode res = dfs(inorder, postorder, 0, inorder.length - 1, 0, postorder.length - 1);
        return res;
        
    }
    public TreeNode dfs(int[] inorder, int[] postorder, int in_left, int in_right, int post_left, int post_right){
        if(in_left > in_right || post_left > post_right)
            return null;
        int post_root_index = post_right;
        int in_root_index = map.get(postorder[post_root_index]);

        TreeNode root = new TreeNode(postorder[post_root_index]);
        int left_sub_tree = in_root_index - in_left;
        root.left = dfs(inorder, postorder, in_left, in_root_index - 1, post_left, post_left + left_sub_tree - 1);
        root.right = dfs(inorder, postorder, in_root_index + 1, in_right, post_left + left_sub_tree, post_right - 1);
        return root;
    }
