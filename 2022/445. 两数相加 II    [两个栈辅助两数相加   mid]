/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null)
            return l2;
        if(l2 == null)
            return l1;
        Deque<Integer> deque1 = new LinkedList<>();
        Deque<Integer> deque2 = new LinkedList<>();
        while(l1 != null){
            deque1.push(l1.val);
            l1 = l1.next;
        }
        while(l2 != null){
            deque2.push(l2.val);
            l2 = l2.next;
        }
        int add = 0;
        int num1 = 0;
        int num2 = 0;
        ListNode tail = null;
        ListNode curr = null;
        while(!deque1.isEmpty() || !deque2.isEmpty() || add != 0){
            num1 = deque1.isEmpty() ? 0 : deque1.pop();
            num2 = deque2.isEmpty() ? 0 : deque2.pop();
            int res = num1 + num2 + add;
            add = res / 10;
            res %= 10;
            curr = new ListNode(res, tail);
            tail = curr;
        }
        return curr;
    }
}
