//先排序再连接 O(n) + O(nlogn) + O(n)  2756 ms	54.6 MB
public ListNode sortList(ListNode head) {
        return sortList(head, null);
    }

    public ListNode sortList(ListNode head, ListNode tail) {
        if (head == null) {
            return head;
        }
        if (head.next == tail) {
            head.next = null;
            return head;
        }
        ListNode slow = head, fast = head;
        while (fast != tail) {
            slow = slow.next;
            fast = fast.next;
            if (fast != tail) {
                fast = fast.next;
            }
        }
        ListNode mid = slow;
        ListNode list1 = sortList(head, mid);
        ListNode list2 = sortList(mid, tail);
        ListNode sorted = merge(list1, list2);
        return sorted;
    }

    public ListNode merge(ListNode head1, ListNode head2) {
        ListNode dummyHead = new ListNode(0);
        ListNode temp = dummyHead, temp1 = head1, temp2 = head2;
        while (temp1 != null && temp2 != null) {
            if (temp1.val <= temp2.val) {
                temp.next = temp1;
                temp1 = temp1.next;
            } else {
                temp.next = temp2;
                temp2 = temp2.next;
            }
            temp = temp.next;
        }
        if (temp1 != null) {
            temp.next = temp1;
        } else if (temp2 != null) {
            temp.next = temp2;
        }
        return dummyHead.next;
    }
//pation去解决    6 ms	49 MB	   归并思想   用到递归
public ListNode sortList(ListNode head) {
        while(head == null || head.next == null)
            return head;
        ListNode rubbit = head.next;
        ListNode turple = head;
        while(rubbit != null && rubbit.next != null){
            rubbit = rubbit.next.next;
            turple = turple.next;
        }
        ListNode temp = turple.next;
        turple.next = null;
        ListNode left = sortList(head);
        ListNode right = sortList(temp);
        ListNode res = new ListNode(0);
        ListNode h = res;
        while(left != null && right != null){
            if(left.val < right.val){
                h.next = left;
                left = left.next;
            }else{
                h.next = right;
                right = right.next;
            }
            h = h.next;
        }
        h.next = left != null ? left : right;
        return res.next;
    }
class Solution {
     // 自底向上归并排序
    public ListNode sortList(ListNode head) {
        if(head == null){
            return head;
        }
        ListNode temp = head;
        int length = 0;
        while(temp != null){
            length++;
            temp = temp.next;
        }
        ListNode dummmyNode = new ListNode(0);
        dummmyNode.next = head;
        for(int len = 1; len < length; len <<= 1){
            ListNode prev = dummmyNode;
            ListNode cur = dummmyNode.next;
            while(cur != null){
                ListNode head1 = cur;
                for(int i = 1; i < len && cur != null && cur.next != null; i++){
                    cur = cur.next;
                }

                ListNode head2 = cur.next;
                cur.next = null;
                cur = head2;
                for(int i = 1; i < len && cur != null && cur.next != null; i++){
                    cur = cur.next;
                }

                ListNode next = null;
                if(cur != null){
                    next = cur.next;
                    cur.next = null;
                }

                ListNode mergerd = mergeTwoList(head1, head2);
                prev.next = mergerd;
                while(prev.next != null)
                    prev = prev.next;
                cur = next;
            }
        }
        return dummmyNode.next;


    }
    public ListNode mergeTwoList(ListNode head1, ListNode head2){
        ListNode dummmyNode = new ListNode(0);
        ListNode temp = dummmyNode;
        while(head1 != null && head2 != null){
            if(head1.val < head2.val){
                temp.next = head1;
                head1 = head1.next;
            }else{
                temp.next = head2;
                head2 = head2.next;
            }
            temp = temp.next;
        }
        temp.next = head1 != null ? head1 : head2;
        return dummmyNode.next;
    }
}
    
