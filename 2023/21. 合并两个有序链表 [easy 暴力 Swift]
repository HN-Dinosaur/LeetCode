/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */
class Solution {
    func mergeTwoLists(_ list1: ListNode?, _ list2: ListNode?) -> ListNode? {
        var head = ListNode()
        var pre: ListNode? = head
        var temp1 = list1
        var temp2 = list2
        while (temp1 != nil && temp2 != nil) {
            if temp1!.val < temp2!.val {
                pre?.next = temp1
                temp1 = temp1!.next
            } else {
                pre?.next = temp2
                temp2 = temp2!.next
            }
            pre = pre?.next
        }
        pre?.next = temp1 == nil ? temp2 : temp1 
        return head.next
    }
}
