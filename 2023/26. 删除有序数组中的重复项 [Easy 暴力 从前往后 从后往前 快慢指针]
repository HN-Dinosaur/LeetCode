// 从前往后
class Solution {
    func removeDuplicates(_ nums: inout [Int]) -> Int {
        var len = 0
        if nums.count <= 0 {
            return 0
        }
        for i in 1..<nums.count {
            if nums[len] != nums[i] {
                len += 1
                nums[len] = nums[i]
            }
        }
        nums.removeSubrange(len+1..<nums.count)
        return len + 1
    }
}

// 从后向前，不用处理数组下标问题
class Solution {
    func removeDuplicates(_ nums: inout [Int]) -> Int {
        if nums.count <= 0 {
            return 0
        }
        var len = nums.count - 1
        while len > 0 {
            if nums[len] == nums[len - 1] {
                nums.remove(at: len)
            }
            len -= 1
        }
        return nums.count
    }
}

// 快慢指针
class Solution {
    func removeDuplicates(_ nums: inout [Int]) -> Int {
        if nums.count <= 0 { return 0 }
        var slow = 1
        var fast = 1
        while fast < nums.count {
            if nums[fast] != nums[fast - 1] {
                nums[slow] = nums[fast]
                slow += 1
            }
            fast += 1
        }
        nums.removeSubrange(slow..<nums.count)
        return slow
    }
}
